// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id       String @id @default(uuid())
  name     String
  slug     String
  imageUrl String

  products Product[]
}

model Product {
  id                 String   @id @default(uuid())
  name               String
  slug               String
  description        String
  basePrice          Decimal  @db.Decimal(8, 2)
  imageUrls          String[]
  discountPercentage Int      @default(0)

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  orderProduct OrderProduct[]
}

model Order {
  id           String         @id @default(uuid())
  userId       String
  orderProduct OrderProduct[]
  createAt     DateTime       @default(now())
  updateAt     DateTime       @default(now()) @updatedAt
  status       OrderStatus    @default(WAITING_FOR_PAYMENT)

  user User @relation(fields: [userId], references: [id])
}

enum OrderStatus {
  WAITING_FOR_PAYMENT
  PAYMENT_CONFIRMED
}

model OrderProduct {
  id                 String  @id @default(uuid())
  orderId            String?
  productId          String
  basePrice          Decimal @db.Decimal(8, 2)
  discountPercentage Int     @default(0)
  quantity           Int

  product Product @relation(fields: [productId], references: [id])
  order   Order?  @relation(fields: [orderId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  order         Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
